{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm/es2017/build/6dsdnxyn.sc.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqC;;AAEe;AAC6B;AACpD;AACyB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB;AACzC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,6BAA6B;AAClD,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS,EAAE;AACX;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC,cAAc;AACrD;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB,sBAAsB,kCAAkC,eAAe;AACtH;AACA;AACA;AACA;AACA,0CAA0C,iBAAiB;AAC3D;AACA;AACA,0CAA0C,4BAA4B,uCAAuC,0BAA0B;AACvI;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,aAAa;AACtE,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,SAAS;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,4DAAQ;AACrE,yDAAyD,4DAAQ;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAcqBAAqB,qBAAqB;AAC1C,6BAA6B;AAC7B;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,MAAM;AACN,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS,EAAE;AACX,4BAA4B;AAC5B;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uPAA6B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4DAAe;AAChD;AACA;AACA;AACA,cAAc,4DAAe;AAC7B;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC;AACA;AACA,cAAc,4DAAU,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAC;AACjB;AACA,qBAAqB,4BAA4B;AACjD,gCAAgC,iBAAiB;AACjD,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,MAAM;AACN,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS,EAAE;AACX,wBAAwB,iCAAiC,OAAO,QAAQ,MAAM,SAAS,kBAAkB,0BAA0B,gBAAgB,UAAU,EAAE;AAC/J;;AAEsH","file":"24.js","sourcesContent":["import { h } from '../ionic.core.js';\n\nimport { j as debounce } from './chunk-6d7d2f8c.js';\nimport { a as attachComponent, b as detachComponent } from './chunk-99929188.js';\nimport './chunk-90d954cd.js';\nimport { c as transition } from './chunk-e89a7020.js';\n\nclass Route {\r\n    constructor() {\r\n        this.url = '';\r\n    }\r\n    onUpdate(newValue) {\r\n        this.ionRouteDataChanged.emit(newValue);\r\n    }\r\n    onComponentProps(newValue, oldValue) {\r\n        if (newValue === oldValue) {\r\n            return;\r\n        }\r\n        const keys1 = newValue ? Object.keys(newValue) : [];\r\n        const keys2 = oldValue ? Object.keys(oldValue) : [];\r\n        if (keys1.length !== keys2.length) {\r\n            this.onUpdate(newValue);\r\n            return;\r\n        }\r\n        for (const key of keys1) {\r\n            if (newValue[key] !== oldValue[key]) {\r\n                this.onUpdate(newValue);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    componentDidLoad() {\r\n        this.ionRouteDataChanged.emit();\r\n    }\r\n    componentDidUnload() {\r\n        this.ionRouteDataChanged.emit();\r\n    }\r\n    static get is() { return \"ion-route\"; }\r\n    static get properties() { return {\r\n        \"component\": {\r\n            \"type\": String,\r\n            \"attr\": \"component\",\r\n            \"watchCallbacks\": [\"onUpdate\"]\r\n        },\r\n        \"componentProps\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"component-props\",\r\n            \"watchCallbacks\": [\"onComponentProps\"]\r\n        },\r\n        \"url\": {\r\n            \"type\": String,\r\n            \"attr\": \"url\",\r\n            \"watchCallbacks\": [\"onUpdate\"]\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"ionRouteDataChanged\",\r\n            \"method\": \"ionRouteDataChanged\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n}\n\nclass RouteRedirect {\r\n    propDidChange() {\r\n        this.ionRouteRedirectChanged.emit();\r\n    }\r\n    componentDidLoad() {\r\n        this.ionRouteRedirectChanged.emit();\r\n    }\r\n    componentDidUnload() {\r\n        this.ionRouteRedirectChanged.emit();\r\n    }\r\n    static get is() { return \"ion-route-redirect\"; }\r\n    static get properties() { return {\r\n        \"from\": {\r\n            \"type\": String,\r\n            \"attr\": \"from\",\r\n            \"watchCallbacks\": [\"propDidChange\"]\r\n        },\r\n        \"to\": {\r\n            \"type\": String,\r\n            \"attr\": \"to\",\r\n            \"watchCallbacks\": [\"propDidChange\"]\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"ionRouteRedirectChanged\",\r\n            \"method\": \"ionRouteRedirectChanged\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n}\n\nconst ROUTER_INTENT_NONE = 'root';\r\nconst ROUTER_INTENT_FORWARD = 'forward';\r\nconst ROUTER_INTENT_BACK = 'back';\n\nfunction generatePath(segments) {\r\n    const path = segments\r\n        .filter(s => s.length > 0)\r\n        .join('/');\r\n    return '/' + path;\r\n}\r\nfunction chainToPath(chain) {\r\n    const path = [];\r\n    for (const route of chain) {\r\n        for (const segment of route.path) {\r\n            if (segment[0] === ':') {\r\n                const param = route.params && route.params[segment.slice(1)];\r\n                if (!param) {\r\n                    return null;\r\n                }\r\n                path.push(param);\r\n            }\r\n            else if (segment !== '') {\r\n                path.push(segment);\r\n            }\r\n        }\r\n    }\r\n    return path;\r\n}\r\nfunction writePath(history, root, useHash, path, direction, state) {\r\n    let url = generatePath([\r\n        ...parsePath(root),\r\n        ...path\r\n    ]);\r\n    if (useHash) {\r\n        url = '#' + url;\r\n    }\r\n    if (direction === ROUTER_INTENT_FORWARD) {\r\n        history.pushState(state, '', url);\r\n    }\r\n    else {\r\n        history.replaceState(state, '', url);\r\n    }\r\n}\r\nfunction removePrefix(prefix, path) {\r\n    if (prefix.length > path.length) {\r\n        return null;\r\n    }\r\n    if (prefix.length <= 1 && prefix[0] === '') {\r\n        return path;\r\n    }\r\n    for (let i = 0; i < prefix.length; i++) {\r\n        if (prefix[i].length > 0 && prefix[i] !== path[i]) {\r\n            return null;\r\n        }\r\n    }\r\n    if (path.length === prefix.length) {\r\n        return [''];\r\n    }\r\n    return path.slice(prefix.length);\r\n}\r\nfunction readPath(loc, root, useHash) {\r\n    let pathname = loc.pathname;\r\n    if (useHash) {\r\n        const hash = loc.hash;\r\n        pathname = (hash[0] === '#')\r\n            ? hash.slice(1)\r\n            : '';\r\n    }\r\n    const prefix = parsePath(root);\r\n    const path = parsePath(pathname);\r\n    return removePrefix(prefix, path);\r\n}\r\nfunction parsePath(path) {\r\n    if (path == null) {\r\n        return [''];\r\n    }\r\n    const segments = path.split('/')\r\n        .map(s => s.trim())\r\n        .filter(s => s.length > 0);\r\n    if (segments.length === 0) {\r\n        return [''];\r\n    }\r\n    else {\r\n        return segments;\r\n    }\r\n}\n\nfunction printRoutes(routes) {\r\n    console.group(`[ion-core] ROUTES[${routes.length}]`);\r\n    for (const chain of routes) {\r\n        const path = [];\r\n        chain.forEach(r => path.push(...r.path));\r\n        const ids = chain.map(r => r.id);\r\n        console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\r\n    }\r\n    console.groupEnd();\r\n}\r\nfunction printRedirects(redirects) {\r\n    console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\r\n    for (const redirect of redirects) {\r\n        if (redirect.to) {\r\n            console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to)}`, 'font-weight: bold');\r\n        }\r\n    }\r\n    console.groupEnd();\r\n}\n\nasync function writeNavState(root, chain, direction, index, changed = false) {\r\n    try {\r\n        const outlet = searchNavNode(root);\r\n        if (index >= chain.length || !outlet) {\r\n            return changed;\r\n        }\r\n        await outlet.componentOnReady();\r\n        const route = chain[index];\r\n        const result = await outlet.setRouteId(route.id, route.params, direction);\r\n        if (result.changed) {\r\n            direction = ROUTER_INTENT_NONE;\r\n            changed = true;\r\n        }\r\n        changed = await writeNavState(result.element, chain, direction, index + 1, changed);\r\n        if (result.markVisible) {\r\n            await result.markVisible();\r\n        }\r\n        return changed;\r\n    }\r\n    catch (e) {\r\n        console.error(e);\r\n        return false;\r\n    }\r\n}\r\nasync function readNavState(root) {\r\n    const ids = [];\r\n    let outlet;\r\n    let node = root;\r\n    while (true) {\r\n        outlet = searchNavNode(node);\r\n        if (outlet) {\r\n            const id = await outlet.getRouteId();\r\n            if (id) {\r\n                node = id.element;\r\n                id.element = undefined;\r\n                ids.push(id);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    return { ids, outlet };\r\n}\r\nfunction waitUntilNavNode(win) {\r\n    if (searchNavNode(win.document.body)) {\r\n        return Promise.resolve();\r\n    }\r\n    return new Promise(resolve => {\r\n        win.addEventListener('ionNavWillLoad', resolve, { once: true });\r\n    });\r\n}\r\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\r\nfunction searchNavNode(root) {\r\n    if (!root) {\r\n        return undefined;\r\n    }\r\n    if (root.matches(QUERY)) {\r\n        return root;\r\n    }\r\n    const outlet = root.querySelector(QUERY);\r\n    return outlet ? outlet : undefined;\r\n}\n\nfunction matchesRedirect(input, route) {\r\n    const { from, to } = route;\r\n    if (to === undefined) {\r\n        return false;\r\n    }\r\n    if (from.length > input.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < from.length; i++) {\r\n        const expected = from[i];\r\n        if (expected === '*') {\r\n            return true;\r\n        }\r\n        if (expected !== input[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return from.length === input.length;\r\n}\r\nfunction routeRedirect(path, routes) {\r\n    return routes.find(route => matchesRedirect(path, route));\r\n}\r\nfunction matchesIDs(ids, chain) {\r\n    const len = Math.min(ids.length, chain.length);\r\n    let i = 0;\r\n    for (; i < len; i++) {\r\n        if (ids[i].toLowerCase() !== chain[i].id) {\r\n            break;\r\n        }\r\n    }\r\n    return i;\r\n}\r\nfunction matchesPath(inputPath, chain) {\r\n    const segments = new RouterSegments(inputPath);\r\n    let matchesDefault = false;\r\n    let allparams;\r\n    for (let i = 0; i < chain.length; i++) {\r\n        const path = chain[i].path;\r\n        if (path[0] === '') {\r\n            matchesDefault = true;\r\n        }\r\n        else {\r\n            for (const segment of path) {\r\n                const data = segments.next();\r\n                if (segment[0] === ':') {\r\n                    if (data === '') {\r\n                        return null;\r\n                    }\r\n                    allparams = allparams || [];\r\n                    const params = allparams[i] || (allparams[i] = {});\r\n                    params[segment.slice(1)] = data;\r\n                }\r\n                else if (data !== segment) {\r\n                    return null;\r\n                }\r\n            }\r\n            matchesDefault = false;\r\n        }\r\n    }\r\n    const matches = (matchesDefault)\r\n        ? matchesDefault === (segments.next() === '')\r\n        : true;\r\n    if (!matches) {\r\n        return null;\r\n    }\r\n    if (allparams) {\r\n        return chain.map((route, i) => ({\r\n            id: route.id,\r\n            path: route.path,\r\n            params: mergeParams(route.params, allparams[i])\r\n        }));\r\n    }\r\n    return chain;\r\n}\r\nfunction mergeParams(a, b) {\r\n    if (!a && b) {\r\n        return b;\r\n    }\r\n    else if (a && !b) {\r\n        return a;\r\n    }\r\n    else if (a && b) {\r\n        return Object.assign({}, a, b);\r\n    }\r\n    return undefined;\r\n}\r\nfunction routerIDsToChain(ids, chains) {\r\n    let match = null;\r\n    let maxMatches = 0;\r\n    const plainIDs = ids.map(i => i.id);\r\n    for (const chain of chains) {\r\n        const score = matchesIDs(plainIDs, chain);\r\n        if (score > maxMatches) {\r\n            match = chain;\r\n            maxMatches = score;\r\n        }\r\n    }\r\n    if (match) {\r\n        return match.map((route, i) => ({\r\n            id: route.id,\r\n            path: route.path,\r\n            params: mergeParams(route.params, ids[i] && ids[i].params)\r\n        }));\r\n    }\r\n    return null;\r\n}\r\nfunction routerPathToChain(path, chains) {\r\n    let match = null;\r\n    let matches = 0;\r\n    for (const chain of chains) {\r\n        const matchedChain = matchesPath(path, chain);\r\n        if (matchedChain !== null) {\r\n            const score = computePriority(matchedChain);\r\n            if (score > matches) {\r\n                matches = score;\r\n                match = matchedChain;\r\n            }\r\n        }\r\n    }\r\n    return match;\r\n}\r\nfunction computePriority(chain) {\r\n    let score = 1;\r\n    let level = 1;\r\n    for (const route of chain) {\r\n        for (const path of route.path) {\r\n            if (path[0] === ':') {\r\n                score += Math.pow(1, level);\r\n            }\r\n            else if (path !== '') {\r\n                score += Math.pow(2, level);\r\n            }\r\n            level++;\r\n        }\r\n    }\r\n    return score;\r\n}\r\nclass RouterSegments {\r\n    constructor(path) {\r\n        this.path = path.slice();\r\n    }\r\n    next() {\r\n        if (this.path.length > 0) {\r\n            return this.path.shift();\r\n        }\r\n        return '';\r\n    }\r\n}\n\nfunction readRedirects(root) {\r\n    return Array.from(root.children)\r\n        .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\r\n        .map(el => {\r\n        const to = readProp(el, 'to');\r\n        return {\r\n            from: parsePath(readProp(el, 'from')),\r\n            to: to == null ? undefined : parsePath(to),\r\n        };\r\n    });\r\n}\r\nfunction readRoutes(root) {\r\n    return flattenRouterTree(readRouteNodes(root));\r\n}\r\nfunction readRouteNodes(root, node = root) {\r\n    return Array.from(node.children)\r\n        .filter(el => el.tagName === 'ION-ROUTE' && el.component)\r\n        .map(el => {\r\n        const component = readProp(el, 'component');\r\n        if (component == null) {\r\n            throw new Error('component missing in ion-route');\r\n        }\r\n        return {\r\n            path: parsePath(readProp(el, 'url')),\r\n            id: component.toLowerCase(),\r\n            params: el.componentProps,\r\n            children: readRouteNodes(root, el)\r\n        };\r\n    });\r\n}\r\nfunction readProp(el, prop) {\r\n    if (prop in el) {\r\n        return el[prop];\r\n    }\r\n    if (el.hasAttribute(prop)) {\r\n        return el.getAttribute(prop);\r\n    }\r\n    return null;\r\n}\r\nfunction flattenRouterTree(nodes) {\r\n    const routes = [];\r\n    for (const node of nodes) {\r\n        flattenNode([], routes, node);\r\n    }\r\n    return routes;\r\n}\r\nfunction flattenNode(chain, routes, node) {\r\n    const s = chain.slice();\r\n    s.push({\r\n        id: node.id,\r\n        path: node.path,\r\n        params: node.params\r\n    });\r\n    if (node.children.length === 0) {\r\n        routes.push(s);\r\n        return;\r\n    }\r\n    for (const sub of node.children) {\r\n        flattenNode(s, routes, sub);\r\n    }\r\n}\n\nclass Router {\r\n    constructor() {\r\n        this.previousPath = null;\r\n        this.busy = false;\r\n        this.state = 0;\r\n        this.lastState = 0;\r\n        this.root = '/';\r\n        this.useHash = true;\r\n    }\r\n    async componentWillLoad() {\r\n        console.debug('[ion-router] router will load');\r\n        await waitUntilNavNode(this.win);\r\n        console.debug('[ion-router] found nav');\r\n        await this.onRoutesChanged();\r\n    }\r\n    componentDidLoad() {\r\n        this.win.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\r\n        this.win.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\r\n    }\r\n    onPopState() {\r\n        const direction = this.historyDirection();\r\n        const path = this.getPath();\r\n        console.debug('[ion-router] URL changed -> update nav', path, direction);\r\n        return this.writeNavStateRoot(path, direction);\r\n    }\r\n    onBackButton(ev) {\r\n        ev.detail.register(0, () => this.back());\r\n    }\r\n    push(url, direction = 'forward') {\r\n        if (url.startsWith('.')) {\r\n            url = (new URL(url, this.win.location.href)).pathname;\r\n        }\r\n        console.debug('[ion-router] URL pushed -> updating nav', url, direction);\r\n        const path = parsePath(url);\r\n        this.setPath(path, direction);\r\n        return this.writeNavStateRoot(path, direction);\r\n    }\r\n    back() {\r\n        this.win.history.back();\r\n        return Promise.resolve(this.waitPromise);\r\n    }\r\n    printDebug() {\r\n        console.debug('CURRENT PATH', this.getPath());\r\n        console.debug('PREVIOUS PATH', this.previousPath);\r\n        printRoutes(readRoutes(this.el));\r\n        printRedirects(readRedirects(this.el));\r\n    }\r\n    async navChanged(direction) {\r\n        if (this.busy) {\r\n            console.warn('[ion-router] router is busy, navChanged was cancelled');\r\n            return false;\r\n        }\r\n        const { ids, outlet } = await readNavState(this.win.document.body);\r\n        const routes = readRoutes(this.el);\r\n        const chain = routerIDsToChain(ids, routes);\r\n        if (!chain) {\r\n            console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\r\n            return false;\r\n        }\r\n        const path = chainToPath(chain);\r\n        if (!path) {\r\n            console.warn('[ion-router] router could not match path because some required param is missing');\r\n            return false;\r\n        }\r\n        console.debug('[ion-router] nav changed -> update URL', ids, path);\r\n        this.setPath(path, direction);\r\n        await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\r\n        return true;\r\n    }\r\n    onRedirectChanged() {\r\n        const path = this.getPath();\r\n        if (path && routeRedirect(path, readRedirects(this.el))) {\r\n            this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\r\n        }\r\n    }\r\n    onRoutesChanged() {\r\n        return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\r\n    }\r\n    historyDirection() {\r\n        const win = this.win;\r\n        if (win.history.state === null) {\r\n            this.state++;\r\n            win.history.replaceState(this.state, win.document.title, win.document.location && win.document.location.href);\r\n        }\r\n        const state = win.history.state;\r\n        const lastState = this.lastState;\r\n        this.lastState = state;\r\n        if (state > lastState) {\r\n            return ROUTER_INTENT_FORWARD;\r\n        }\r\n        else if (state < lastState) {\r\n            return ROUTER_INTENT_BACK;\r\n        }\r\n        else {\r\n            return ROUTER_INTENT_NONE;\r\n        }\r\n    }\r\n    async writeNavStateRoot(path, direction) {\r\n        if (!path) {\r\n            console.error('[ion-router] URL is not part of the routing set');\r\n            return false;\r\n        }\r\n        const redirects = readRedirects(this.el);\r\n        const redirect = routeRedirect(path, redirects);\r\n        let redirectFrom = null;\r\n        if (redirect) {\r\n            this.setPath(redirect.to, direction);\r\n            redirectFrom = redirect.from;\r\n            path = redirect.to;\r\n        }\r\n        const routes = readRoutes(this.el);\r\n        const chain = routerPathToChain(path, routes);\r\n        if (!chain) {\r\n            console.error('[ion-router] the path does not match any route');\r\n            return false;\r\n        }\r\n        return this.safeWriteNavState(this.win.document.body, chain, direction, path, redirectFrom);\r\n    }\r\n    async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0) {\r\n        const unlock = await this.lock();\r\n        let changed = false;\r\n        try {\r\n            changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index);\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n        unlock();\r\n        return changed;\r\n    }\r\n    async lock() {\r\n        const p = this.waitPromise;\r\n        let resolve;\r\n        this.waitPromise = new Promise(r => resolve = r);\r\n        if (p !== undefined) {\r\n            await p;\r\n        }\r\n        return resolve;\r\n    }\r\n    async writeNavState(node, chain, direction, path, redirectFrom, index = 0) {\r\n        if (this.busy) {\r\n            console.warn('[ion-router] router is busy, transition was cancelled');\r\n            return false;\r\n        }\r\n        this.busy = true;\r\n        const routeEvent = this.routeChangeEvent(path, redirectFrom);\r\n        if (routeEvent) {\r\n            this.ionRouteWillChange.emit(routeEvent);\r\n        }\r\n        const changed = await writeNavState(node, chain, direction, index);\r\n        this.busy = false;\r\n        if (changed) {\r\n            console.debug('[ion-router] route changed', path);\r\n        }\r\n        if (routeEvent) {\r\n            this.ionRouteDidChange.emit(routeEvent);\r\n        }\r\n        return changed;\r\n    }\r\n    setPath(path, direction) {\r\n        this.state++;\r\n        writePath(this.win.history, this.root, this.useHash, path, direction, this.state);\r\n    }\r\n    getPath() {\r\n        return readPath(this.win.location, this.root, this.useHash);\r\n    }\r\n    routeChangeEvent(path, redirectFromPath) {\r\n        const from = this.previousPath;\r\n        const to = generatePath(path);\r\n        this.previousPath = to;\r\n        if (to === from) {\r\n            return null;\r\n        }\r\n        const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\r\n        return {\r\n            from,\r\n            redirectedFrom,\r\n            to,\r\n        };\r\n    }\r\n    static get is() { return \"ion-router\"; }\r\n    static get properties() { return {\r\n        \"back\": {\r\n            \"method\": true\r\n        },\r\n        \"config\": {\r\n            \"context\": \"config\"\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"navChanged\": {\r\n            \"method\": true\r\n        },\r\n        \"printDebug\": {\r\n            \"method\": true\r\n        },\r\n        \"push\": {\r\n            \"method\": true\r\n        },\r\n        \"queue\": {\r\n            \"context\": \"queue\"\r\n        },\r\n        \"root\": {\r\n            \"type\": String,\r\n            \"attr\": \"root\"\r\n        },\r\n        \"useHash\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"use-hash\"\r\n        },\r\n        \"win\": {\r\n            \"context\": \"window\"\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"ionRouteWillChange\",\r\n            \"method\": \"ionRouteWillChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"ionRouteDidChange\",\r\n            \"method\": \"ionRouteDidChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get listeners() { return [{\r\n            \"name\": \"window:popstate\",\r\n            \"method\": \"onPopState\"\r\n        }, {\r\n            \"name\": \"document:ionBackButton\",\r\n            \"method\": \"onBackButton\"\r\n        }]; }\r\n}\n\nclass RouterOutlet {\r\n    constructor() {\r\n        this.animated = true;\r\n    }\r\n    swipeHandlerChanged() {\r\n        if (this.gesture) {\r\n            this.gesture.setDisabled(this.swipeHandler === undefined);\r\n        }\r\n    }\r\n    componentWillLoad() {\r\n        this.ionNavWillLoad.emit();\r\n    }\r\n    async componentDidLoad() {\r\n        this.gesture = (await import('./chunk-ca529fbc.js')).createSwipeBackGesture(this.el, this.queue, () => !!this.swipeHandler && this.swipeHandler.canStart(), () => this.swipeHandler && this.swipeHandler.onStart(), step => this.ani && this.ani.progressStep(step), (shouldComplete, step, dur) => {\r\n            if (this.ani) {\r\n                this.ani.progressEnd(shouldComplete, step, dur);\r\n            }\r\n            if (this.swipeHandler) {\r\n                this.swipeHandler.onEnd(shouldComplete);\r\n            }\r\n        });\r\n        this.swipeHandlerChanged();\r\n    }\r\n    componentDidUnload() {\r\n        this.activeEl = this.activeComponent = undefined;\r\n        if (this.gesture) {\r\n            this.gesture.destroy();\r\n            this.gesture = undefined;\r\n        }\r\n    }\r\n    async commit(enteringEl, leavingEl, opts) {\r\n        const unlock = await this.lock();\r\n        let changed = false;\r\n        try {\r\n            changed = await this.transition(enteringEl, leavingEl, opts);\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n        unlock();\r\n        return changed;\r\n    }\r\n    async setRouteId(id, params, direction) {\r\n        const changed = await this.setRoot(id, params, {\r\n            duration: direction === 'root' ? 0 : undefined,\r\n            direction: direction === 'back' ? 'back' : 'forward',\r\n        });\r\n        return {\r\n            changed,\r\n            element: this.activeEl\r\n        };\r\n    }\r\n    async getRouteId() {\r\n        const active = this.activeEl;\r\n        return active ? {\r\n            id: active.tagName,\r\n            element: active,\r\n        } : undefined;\r\n    }\r\n    async setRoot(component, params, opts) {\r\n        if (this.activeComponent === component) {\r\n            return false;\r\n        }\r\n        const leavingEl = this.activeEl;\r\n        const enteringEl = await attachComponent(this.delegate, this.el, component, ['ion-page', 'ion-page-invisible'], params);\r\n        this.activeComponent = component;\r\n        this.activeEl = enteringEl;\r\n        await this.commit(enteringEl, leavingEl, opts);\r\n        await detachComponent(this.delegate, leavingEl);\r\n        return true;\r\n    }\r\n    async transition(enteringEl, leavingEl, opts = {}) {\r\n        if (leavingEl === enteringEl) {\r\n            return false;\r\n        }\r\n        this.ionNavWillChange.emit();\r\n        const { mode, queue, win, el } = this;\r\n        const animated = this.animated && this.config.getBoolean('animated', true);\r\n        const animationBuilder = this.animation || opts.animationBuilder || this.config.get('navAnimation');\r\n        await transition(Object.assign({ mode,\r\n            queue,\r\n            animated,\r\n            animationBuilder, window: win, enteringEl,\r\n            leavingEl, baseEl: el, progressCallback: (opts.progressAnimation\r\n                ? ani => this.ani = ani\r\n                : undefined) }, opts));\r\n        this.ionNavDidChange.emit();\r\n        return true;\r\n    }\r\n    async lock() {\r\n        const p = this.waitPromise;\r\n        let resolve;\r\n        this.waitPromise = new Promise(r => resolve = r);\r\n        if (p !== undefined) {\r\n            await p;\r\n        }\r\n        return resolve;\r\n    }\r\n    render() {\r\n        return (h(\"slot\", null));\r\n    }\r\n    static get is() { return \"ion-router-outlet\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get properties() { return {\r\n        \"animated\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"animated\"\r\n        },\r\n        \"animation\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"animation\"\r\n        },\r\n        \"commit\": {\r\n            \"method\": true\r\n        },\r\n        \"config\": {\r\n            \"context\": \"config\"\r\n        },\r\n        \"delegate\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"delegate\"\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"getRouteId\": {\r\n            \"method\": true\r\n        },\r\n        \"mode\": {\r\n            \"type\": String,\r\n            \"attr\": \"mode\"\r\n        },\r\n        \"queue\": {\r\n            \"context\": \"queue\"\r\n        },\r\n        \"setRouteId\": {\r\n            \"method\": true\r\n        },\r\n        \"swipeHandler\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"swipe-handler\",\r\n            \"watchCallbacks\": [\"swipeHandlerChanged\"]\r\n        },\r\n        \"win\": {\r\n            \"context\": \"window\"\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"ionNavWillLoad\",\r\n            \"method\": \"ionNavWillLoad\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"ionNavWillChange\",\r\n            \"method\": \"ionNavWillChange\",\r\n            \"bubbles\": false,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"ionNavDidChange\",\r\n            \"method\": \"ionNavDidChange\",\r\n            \"bubbles\": false,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get style() { return \".sc-ion-router-outlet-h{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\"; }\r\n}\n\nexport { Route as IonRoute, RouteRedirect as IonRouteRedirect, Router as IonRouter, RouterOutlet as IonRouterOutlet };\n"],"sourceRoot":""}