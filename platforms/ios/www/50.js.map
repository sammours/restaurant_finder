{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm/es2017/build/cwd9g9my.sc.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqC;;AAEa;AACS;AAC2D;AAC5B;;AAE1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4DAAe;AAChD;AACA;AACA;AACA,QAAQ,4DAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uPAA6B;AAC3D;AACA;AACA;AACA;AACA,YAAY,4DAAS,eAAe,oDAAqB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0CAA0C;AACrE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,0CAA0C;AACrE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,+BAA+B,0CAA0C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,eAAe,oBAAoB;AACvG;AACA;AACA;AACA;AACA;AACA,kEAAkE,eAAe,oCAAoC;AACrlB,YAAY,4DAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAM;AACd,QAAQ,4DAAM;AACd,QAAQ,4DAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAM;AAClB,YAAY,4DAAM;AAClB;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAS,eAAe,oDAAoB;AAC5D,gBAAgB,4DAAS,eAAe,oDAAmB;AAC3D,gBAAgB,4DAAS,eAAe,oDAAqB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,uBAAuB;AACvB,eAAe,eAAe,SAAS,4DAAU;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAM;AAClB;AACA;AACA;AACA,YAAY,4DAAM;AAClB;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAM;AACd;AACA;AACA,QAAQ,4DAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,QAAQ;AAC9C;AACA;AACA;AACA,gBAAgB,4DAAS,UAAU,oDAAqB;AACxD;AACA;AACA;AACA,gBAAgB,4DAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAC;AACjB;AACA,qBAAqB,kBAAkB;AACvC,gCAAgC,iBAAiB;AACjD,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,MAAM;AACN,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS,EAAE;AACX,wBAAwB,uBAAuB,OAAO,QAAQ,MAAM,SAAS,kBAAkB,0BAA0B,gBAAgB,UAAU,EAAE;AACrJ;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA,qBAAqB,sBAAsB;AAC3C,6BAA6B;AAC7B;AACA;AACA;AACA,MAAM;AACN,4BAA4B;AAC5B;AACA;AACA,SAAS,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA,mDAAmD,mBAAmB;AACtE;AACA;AACA,qBAAqB,uBAAuB;AAC5C,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,MAAM;AACN,4BAA4B;AAC5B;AACA;AACA,SAAS,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA,sDAAsD,mBAAmB;AACzE;AACA;AACA,qBAAqB,2BAA2B;AAChD,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,MAAM;AACN,4BAA4B;AAC5B;AACA;AACA,SAAS,EAAE;AACX;;AAEkG","file":"50.js","sourcesContent":["import { h } from '../ionic.core.js';\n\nimport { h as assert } from './chunk-6d7d2f8c.js';\nimport { a as attachComponent } from './chunk-99929188.js';\nimport { e as LIFECYCLE_WILL_UNLOAD, a as LIFECYCLE_WILL_LEAVE, d as LIFECYCLE_DID_LEAVE } from './chunk-90d954cd.js';\nimport { b as lifecycle, c as transition, d as setPageHidden } from './chunk-e89a7020.js';\n\nconst VIEW_STATE_NEW = 1;\r\nconst VIEW_STATE_ATTACHED = 2;\r\nconst VIEW_STATE_DESTROYED = 3;\r\nclass ViewController {\r\n    constructor(component, params) {\r\n        this.component = component;\r\n        this.params = params;\r\n        this.state = VIEW_STATE_NEW;\r\n    }\r\n    async init(container) {\r\n        this.state = VIEW_STATE_ATTACHED;\r\n        if (!this.element) {\r\n            const component = this.component;\r\n            this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\r\n        }\r\n    }\r\n    _destroy() {\r\n        assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\r\n        const element = this.element;\r\n        if (element) {\r\n            if (this.delegate) {\r\n                this.delegate.removeViewFromDom(element.parentElement, element);\r\n            }\r\n            else {\r\n                element.remove();\r\n            }\r\n        }\r\n        this.nav = undefined;\r\n        this.state = VIEW_STATE_DESTROYED;\r\n    }\r\n}\r\nfunction matches(view, id, params) {\r\n    if (!view) {\r\n        return false;\r\n    }\r\n    if (view.component !== id) {\r\n        return false;\r\n    }\r\n    const currentParams = view.params;\r\n    if (currentParams === params) {\r\n        return true;\r\n    }\r\n    if (!currentParams && !params) {\r\n        return true;\r\n    }\r\n    if (!currentParams || !params) {\r\n        return false;\r\n    }\r\n    const keysA = Object.keys(currentParams);\r\n    const keysB = Object.keys(params);\r\n    if (keysA.length !== keysB.length) {\r\n        return false;\r\n    }\r\n    for (const key of keysA) {\r\n        if (currentParams[key] !== params[key]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction convertToView(page, params) {\r\n    if (!page) {\r\n        return null;\r\n    }\r\n    if (page instanceof ViewController) {\r\n        return page;\r\n    }\r\n    return new ViewController(page, params);\r\n}\r\nfunction convertToViews(pages) {\r\n    return pages.map(page => {\r\n        if (page instanceof ViewController) {\r\n            return page;\r\n        }\r\n        if ('page' in page) {\r\n            return convertToView(page.page, page.params);\r\n        }\r\n        return convertToView(page, undefined);\r\n    }).filter(v => v !== null);\r\n}\n\nclass Nav {\r\n    constructor() {\r\n        this.transInstr = [];\r\n        this.useRouter = false;\r\n        this.isTransitioning = false;\r\n        this.destroyed = false;\r\n        this.views = [];\r\n        this.animated = true;\r\n    }\r\n    swipeGestureChanged() {\r\n        if (this.gesture) {\r\n            this.gesture.setDisabled(this.swipeGesture !== true);\r\n        }\r\n    }\r\n    rootChanged() {\r\n        if (this.root !== undefined) {\r\n            if (!this.useRouter) {\r\n                this.setRoot(this.root, this.rootParams);\r\n            }\r\n        }\r\n    }\r\n    componentWillLoad() {\r\n        this.useRouter =\r\n            !!this.win.document.querySelector('ion-router') &&\r\n                !this.el.closest('[no-router]');\r\n        if (this.swipeGesture === undefined) {\r\n            this.swipeGesture = this.config.getBoolean('swipeBackEnabled', this.mode === 'ios');\r\n        }\r\n        this.ionNavWillLoad.emit();\r\n    }\r\n    async componentDidLoad() {\r\n        this.rootChanged();\r\n        this.gesture = (await import('./chunk-ca529fbc.js')).createSwipeBackGesture(this.el, this.queue, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\r\n        this.swipeGestureChanged();\r\n    }\r\n    componentDidUnload() {\r\n        for (const view of this.views) {\r\n            lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\r\n            view._destroy();\r\n        }\r\n        if (this.gesture) {\r\n            this.gesture.destroy();\r\n            this.gesture = undefined;\r\n        }\r\n        this.transInstr.length = this.views.length = 0;\r\n        this.destroyed = true;\r\n    }\r\n    push(component, componentProps, opts, done) {\r\n        return this.queueTrns({\r\n            insertStart: -1,\r\n            insertViews: [{ page: component, params: componentProps }],\r\n            opts\r\n        }, done);\r\n    }\r\n    insert(insertIndex, component, componentProps, opts, done) {\r\n        return this.queueTrns({\r\n            insertStart: insertIndex,\r\n            insertViews: [{ page: component, params: componentProps }],\r\n            opts\r\n        }, done);\r\n    }\r\n    insertPages(insertIndex, insertComponents, opts, done) {\r\n        return this.queueTrns({\r\n            insertStart: insertIndex,\r\n            insertViews: insertComponents,\r\n            opts\r\n        }, done);\r\n    }\r\n    pop(opts, done) {\r\n        return this.queueTrns({\r\n            removeStart: -1,\r\n            removeCount: 1,\r\n            opts\r\n        }, done);\r\n    }\r\n    popTo(indexOrViewCtrl, opts, done) {\r\n        const config = {\r\n            removeStart: -1,\r\n            removeCount: -1,\r\n            opts\r\n        };\r\n        if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\r\n            config.removeView = indexOrViewCtrl;\r\n            config.removeStart = 1;\r\n        }\r\n        else if (typeof indexOrViewCtrl === 'number') {\r\n            config.removeStart = indexOrViewCtrl + 1;\r\n        }\r\n        return this.queueTrns(config, done);\r\n    }\r\n    popToRoot(opts, done) {\r\n        return this.queueTrns({\r\n            removeStart: 1,\r\n            removeCount: -1,\r\n            opts\r\n        }, done);\r\n    }\r\n    removeIndex(startIndex, removeCount = 1, opts, done) {\r\n        return this.queueTrns({\r\n            removeStart: startIndex,\r\n            removeCount,\r\n            opts\r\n        }, done);\r\n    }\r\n    setRoot(component, componentProps, opts, done) {\r\n        return this.setPages([{ page: component, params: componentProps }], opts, done);\r\n    }\r\n    setPages(views, opts, done) {\r\n        if (opts == null) {\r\n            opts = {};\r\n        }\r\n        if (opts.animated !== true) {\r\n            opts.animated = false;\r\n        }\r\n        return this.queueTrns({\r\n            insertStart: 0,\r\n            insertViews: views,\r\n            removeStart: 0,\r\n            removeCount: -1,\r\n            opts\r\n        }, done);\r\n    }\r\n    setRouteId(id, params, direction) {\r\n        const active = this.getActiveSync();\r\n        if (matches(active, id, params)) {\r\n            return Promise.resolve({\r\n                changed: false,\r\n                element: active.element\r\n            });\r\n        }\r\n        let resolve;\r\n        const promise = new Promise(r => (resolve = r));\r\n        let finish;\r\n        const commonOpts = {\r\n            updateURL: false,\r\n            viewIsReady: enteringEl => {\r\n                let mark;\r\n                const p = new Promise(r => (mark = r));\r\n                resolve({\r\n                    changed: true,\r\n                    element: enteringEl,\r\n                    markVisible: async () => {\r\n                        mark();\r\n                        await finish;\r\n                    }\r\n                });\r\n                return p;\r\n            }\r\n        };\r\n        if (direction === 'root') {\r\n            finish = this.setRoot(id, params, commonOpts);\r\n        }\r\n        else {\r\n            const viewController = this.views.find(v => matches(v, id, params));\r\n            if (viewController) {\r\n                finish = this.popTo(viewController, Object.assign({}, commonOpts, { direction: 'back' }));\r\n            }\r\n            else if (direction === 'forward') {\r\n                finish = this.push(id, params, commonOpts);\r\n            }\r\n            else if (direction === 'back') {\r\n                finish = this.setRoot(id, params, Object.assign({}, commonOpts, { direction: 'back', animated: true }));\r\n            }\r\n        }\r\n        return promise;\r\n    }\r\n    async getRouteId() {\r\n        const active = this.getActiveSync();\r\n        return active\r\n            ? {\r\n                id: active.element.tagName,\r\n                params: active.params,\r\n                element: active.element\r\n            }\r\n            : undefined;\r\n    }\r\n    getActive() {\r\n        return Promise.resolve(this.getActiveSync());\r\n    }\r\n    getByIndex(index) {\r\n        return Promise.resolve(this.views[index]);\r\n    }\r\n    canGoBack(view) {\r\n        return Promise.resolve(this.canGoBackSync(view));\r\n    }\r\n    getPrevious(view) {\r\n        return Promise.resolve(this.getPreviousSync(view));\r\n    }\r\n    getLength() {\r\n        return this.views.length;\r\n    }\r\n    getActiveSync() {\r\n        return this.views[this.views.length - 1];\r\n    }\r\n    canGoBackSync(view = this.getActiveSync()) {\r\n        return !!(view && this.getPreviousSync(view));\r\n    }\r\n    getPreviousSync(view = this.getActiveSync()) {\r\n        if (!view) {\r\n            return undefined;\r\n        }\r\n        const views = this.views;\r\n        const index = views.indexOf(view);\r\n        return index > 0 ? views[index - 1] : undefined;\r\n    }\r\n    queueTrns(ti, done) {\r\n        if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\r\n            return Promise.resolve(false);\r\n        }\r\n        const promise = new Promise((resolve, reject) => {\r\n            ti.resolve = resolve;\r\n            ti.reject = reject;\r\n        });\r\n        ti.done = done;\r\n        if (ti.insertViews && ti.insertViews.length === 0) {\r\n            ti.insertViews = undefined;\r\n        }\r\n        this.transInstr.push(ti);\r\n        this.nextTrns();\r\n        return promise;\r\n    }\r\n    success(result, ti) {\r\n        if (this.destroyed) {\r\n            this.fireError('nav controller was destroyed', ti);\r\n            return;\r\n        }\r\n        if (ti.done) {\r\n            ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\r\n        }\r\n        ti.resolve(result.hasCompleted);\r\n        if (ti.opts.updateURL !== false && this.useRouter) {\r\n            const router = this.win.document.querySelector('ion-router');\r\n            if (router) {\r\n                const direction = result.direction === 'back' ? 'back' : 'forward';\r\n                router.navChanged(direction);\r\n            }\r\n        }\r\n    }\r\n    failed(rejectReason, ti) {\r\n        if (this.destroyed) {\r\n            this.fireError('nav controller was destroyed', ti);\r\n            return;\r\n        }\r\n        this.transInstr.length = 0;\r\n        this.fireError(rejectReason, ti);\r\n    }\r\n    fireError(rejectReason, ti) {\r\n        if (ti.done) {\r\n            ti.done(false, false, rejectReason);\r\n        }\r\n        if (ti.reject && !this.destroyed) {\r\n            ti.reject(rejectReason);\r\n        }\r\n        else {\r\n            ti.resolve(false);\r\n        }\r\n    }\r\n    nextTrns() {\r\n        if (this.isTransitioning) {\r\n            return false;\r\n        }\r\n        const ti = this.transInstr.shift();\r\n        if (!ti) {\r\n            return false;\r\n        }\r\n        this.runTransition(ti);\r\n        return true;\r\n    }\r\n    async runTransition(ti) {\r\n        try {\r\n            this.ionNavWillChange.emit();\r\n            this.isTransitioning = true;\r\n            this.prepareTI(ti);\r\n            const leavingView = this.getActiveSync();\r\n            const enteringView = this.getEnteringView(ti, leavingView);\r\n            if (!leavingView && !enteringView) {\r\n                throw new Error('no views in the stack to be removed');\r\n            }\r\n            if (enteringView && enteringView.state === VIEW_STATE_NEW) {\r\n                await enteringView.init(this.el);\r\n            }\r\n            this.postViewInit(enteringView, leavingView, ti);\r\n            const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\r\n                enteringView !== leavingView;\r\n            const result = requiresTransition\r\n                ? await this.transition(enteringView, leavingView, ti)\r\n                : {\r\n                    hasCompleted: true,\r\n                    requiresTransition: false\r\n                };\r\n            this.success(result, ti);\r\n            this.ionNavDidChange.emit();\r\n        }\r\n        catch (rejectReason) {\r\n            this.failed(rejectReason, ti);\r\n        }\r\n        this.isTransitioning = false;\r\n        this.nextTrns();\r\n    }\r\n    prepareTI(ti) {\r\n        const viewsLength = this.views.length;\r\n        ti.opts = ti.opts || {};\r\n        if (ti.opts.delegate === undefined) {\r\n            ti.opts.delegate = this.delegate;\r\n        }\r\n        if (ti.removeView !== undefined) {\r\n            assert(ti.removeStart !== undefined, 'removeView needs removeStart');\r\n            assert(ti.removeCount !== undefined, 'removeView needs removeCount');\r\n            const index = this.views.indexOf(ti.removeView);\r\n            if (index < 0) {\r\n                throw new Error('removeView was not found');\r\n            }\r\n            ti.removeStart += index;\r\n        }\r\n        if (ti.removeStart !== undefined) {\r\n            if (ti.removeStart < 0) {\r\n                ti.removeStart = viewsLength - 1;\r\n            }\r\n            if (ti.removeCount < 0) {\r\n                ti.removeCount = viewsLength - ti.removeStart;\r\n            }\r\n            ti.leavingRequiresTransition =\r\n                ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\r\n        }\r\n        if (ti.insertViews) {\r\n            if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\r\n                ti.insertStart = viewsLength;\r\n            }\r\n            ti.enteringRequiresTransition = ti.insertStart === viewsLength;\r\n        }\r\n        const insertViews = ti.insertViews;\r\n        if (!insertViews) {\r\n            return;\r\n        }\r\n        assert(insertViews.length > 0, 'length can not be zero');\r\n        const viewControllers = convertToViews(insertViews);\r\n        if (viewControllers.length === 0) {\r\n            throw new Error('invalid views to insert');\r\n        }\r\n        for (const view of viewControllers) {\r\n            view.delegate = ti.opts.delegate;\r\n            const nav = view.nav;\r\n            if (nav && nav !== this) {\r\n                throw new Error('inserted view was already inserted');\r\n            }\r\n            if (view.state === VIEW_STATE_DESTROYED) {\r\n                throw new Error('inserted view was already destroyed');\r\n            }\r\n        }\r\n        ti.insertViews = viewControllers;\r\n    }\r\n    getEnteringView(ti, leavingView) {\r\n        const insertViews = ti.insertViews;\r\n        if (insertViews !== undefined) {\r\n            return insertViews[insertViews.length - 1];\r\n        }\r\n        const removeStart = ti.removeStart;\r\n        if (removeStart !== undefined) {\r\n            const views = this.views;\r\n            const removeEnd = removeStart + ti.removeCount;\r\n            for (let i = views.length - 1; i >= 0; i--) {\r\n                const view = views[i];\r\n                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\r\n                    return view;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    postViewInit(enteringView, leavingView, ti) {\r\n        assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\r\n        assert(ti.resolve, 'resolve must be valid');\r\n        assert(ti.reject, 'reject must be valid');\r\n        const opts = ti.opts;\r\n        const insertViews = ti.insertViews;\r\n        const removeStart = ti.removeStart;\r\n        const removeCount = ti.removeCount;\r\n        let destroyQueue;\r\n        if (removeStart !== undefined && removeCount !== undefined) {\r\n            assert(removeStart >= 0, 'removeStart can not be negative');\r\n            assert(removeCount >= 0, 'removeCount can not be negative');\r\n            destroyQueue = [];\r\n            for (let i = 0; i < removeCount; i++) {\r\n                const view = this.views[i + removeStart];\r\n                if (view && view !== enteringView && view !== leavingView) {\r\n                    destroyQueue.push(view);\r\n                }\r\n            }\r\n            opts.direction = opts.direction || 'back';\r\n        }\r\n        const finalBalance = this.views.length +\r\n            (insertViews !== undefined ? insertViews.length : 0) -\r\n            (removeCount !== undefined ? removeCount : 0);\r\n        assert(finalBalance >= 0, 'final balance can not be negative');\r\n        if (finalBalance === 0) {\r\n            console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\r\n            throw new Error('navigation stack needs at least one root page');\r\n        }\r\n        if (insertViews) {\r\n            let insertIndex = ti.insertStart;\r\n            for (const view of insertViews) {\r\n                this.insertViewAt(view, insertIndex);\r\n                insertIndex++;\r\n            }\r\n            if (ti.enteringRequiresTransition) {\r\n                opts.direction = opts.direction || 'forward';\r\n            }\r\n        }\r\n        if (destroyQueue && destroyQueue.length > 0) {\r\n            for (const view of destroyQueue) {\r\n                lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\r\n                lifecycle(view.element, LIFECYCLE_DID_LEAVE);\r\n                lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\r\n            }\r\n            for (const view of destroyQueue) {\r\n                this.destroyView(view);\r\n            }\r\n        }\r\n    }\r\n    async transition(enteringView, leavingView, ti) {\r\n        const opts = ti.opts;\r\n        const progressCallback = opts.progressAnimation\r\n            ? (ani) => this.sbAni = ani\r\n            : undefined;\r\n        const enteringEl = enteringView.element;\r\n        const leavingEl = leavingView && leavingView.element;\r\n        const animationOpts = Object.assign({ mode: this.mode, showGoBack: this.canGoBackSync(enteringView), queue: this.queue, window: this.win, baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || this.config.get('navAnimation'), progressCallback, animated: this.animated && this.config.getBoolean('animated', true), enteringEl,\r\n            leavingEl }, opts);\r\n        const { hasCompleted } = await transition(animationOpts);\r\n        return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\r\n    }\r\n    transitionFinish(hasCompleted, enteringView, leavingView, opts) {\r\n        const cleanupView = hasCompleted ? enteringView : leavingView;\r\n        if (cleanupView) {\r\n            this.cleanup(cleanupView);\r\n        }\r\n        return {\r\n            hasCompleted,\r\n            requiresTransition: true,\r\n            enteringView,\r\n            leavingView,\r\n            direction: opts.direction\r\n        };\r\n    }\r\n    insertViewAt(view, index) {\r\n        const views = this.views;\r\n        const existingIndex = views.indexOf(view);\r\n        if (existingIndex > -1) {\r\n            assert(view.nav === this, 'view is not part of the nav');\r\n            views.splice(index, 0, views.splice(existingIndex, 1)[0]);\r\n        }\r\n        else {\r\n            assert(!view.nav, 'nav is used');\r\n            view.nav = this;\r\n            views.splice(index, 0, view);\r\n        }\r\n    }\r\n    removeView(view) {\r\n        assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\r\n        const views = this.views;\r\n        const index = views.indexOf(view);\r\n        assert(index > -1, 'view must be part of the stack');\r\n        if (index >= 0) {\r\n            views.splice(index, 1);\r\n        }\r\n    }\r\n    destroyView(view) {\r\n        view._destroy();\r\n        this.removeView(view);\r\n    }\r\n    cleanup(activeView) {\r\n        if (this.destroyed) {\r\n            return;\r\n        }\r\n        const views = this.views;\r\n        const activeViewIndex = views.indexOf(activeView);\r\n        for (let i = views.length - 1; i >= 0; i--) {\r\n            const view = views[i];\r\n            const element = view.element;\r\n            if (i > activeViewIndex) {\r\n                lifecycle(element, LIFECYCLE_WILL_UNLOAD);\r\n                this.destroyView(view);\r\n            }\r\n            else if (i < activeViewIndex) {\r\n                setPageHidden(element, true);\r\n            }\r\n        }\r\n    }\r\n    canStart() {\r\n        return (!!this.swipeGesture &&\r\n            !this.isTransitioning &&\r\n            this.transInstr.length === 0 &&\r\n            this.canGoBackSync());\r\n    }\r\n    onStart() {\r\n        this.queueTrns({\r\n            removeStart: -1,\r\n            removeCount: 1,\r\n            opts: {\r\n                direction: 'back',\r\n                progressAnimation: true\r\n            }\r\n        }, undefined);\r\n    }\r\n    onMove(stepValue) {\r\n        if (this.sbAni) {\r\n            this.sbAni.progressStep(stepValue);\r\n        }\r\n    }\r\n    onEnd(shouldComplete, stepValue, dur) {\r\n        if (this.sbAni) {\r\n            this.sbAni.progressEnd(shouldComplete, stepValue, dur);\r\n        }\r\n    }\r\n    render() {\r\n        return (h(\"slot\", null));\r\n    }\r\n    static get is() { return \"ion-nav\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get properties() { return {\r\n        \"animated\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"animated\"\r\n        },\r\n        \"animation\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"animation\"\r\n        },\r\n        \"canGoBack\": {\r\n            \"method\": true\r\n        },\r\n        \"config\": {\r\n            \"context\": \"config\"\r\n        },\r\n        \"delegate\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"delegate\"\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"getActive\": {\r\n            \"method\": true\r\n        },\r\n        \"getByIndex\": {\r\n            \"method\": true\r\n        },\r\n        \"getPrevious\": {\r\n            \"method\": true\r\n        },\r\n        \"getRouteId\": {\r\n            \"method\": true\r\n        },\r\n        \"insert\": {\r\n            \"method\": true\r\n        },\r\n        \"insertPages\": {\r\n            \"method\": true\r\n        },\r\n        \"pop\": {\r\n            \"method\": true\r\n        },\r\n        \"popTo\": {\r\n            \"method\": true\r\n        },\r\n        \"popToRoot\": {\r\n            \"method\": true\r\n        },\r\n        \"push\": {\r\n            \"method\": true\r\n        },\r\n        \"queue\": {\r\n            \"context\": \"queue\"\r\n        },\r\n        \"removeIndex\": {\r\n            \"method\": true\r\n        },\r\n        \"root\": {\r\n            \"type\": String,\r\n            \"attr\": \"root\",\r\n            \"watchCallbacks\": [\"rootChanged\"]\r\n        },\r\n        \"rootParams\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"root-params\"\r\n        },\r\n        \"setPages\": {\r\n            \"method\": true\r\n        },\r\n        \"setRoot\": {\r\n            \"method\": true\r\n        },\r\n        \"setRouteId\": {\r\n            \"method\": true\r\n        },\r\n        \"swipeGesture\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"swipe-gesture\",\r\n            \"mutable\": true,\r\n            \"watchCallbacks\": [\"swipeGestureChanged\"]\r\n        },\r\n        \"win\": {\r\n            \"context\": \"window\"\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"ionNavWillLoad\",\r\n            \"method\": \"ionNavWillLoad\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"ionNavWillChange\",\r\n            \"method\": \"ionNavWillChange\",\r\n            \"bubbles\": false,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"ionNavDidChange\",\r\n            \"method\": \"ionNavDidChange\",\r\n            \"bubbles\": false,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get style() { return \".sc-ion-nav-h{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\"; }\r\n}\n\nclass NavPop {\r\n    pop() {\r\n        const nav = this.el.closest('ion-nav');\r\n        if (nav) {\r\n            nav.pop({ skipIfBusy: true });\r\n        }\r\n    }\r\n    static get is() { return \"ion-nav-pop\"; }\r\n    static get properties() { return {\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        }\r\n    }; }\r\n    static get listeners() { return [{\r\n            \"name\": \"child:click\",\r\n            \"method\": \"pop\"\r\n        }]; }\r\n}\n\nclass NavPush {\r\n    push() {\r\n        const nav = this.el.closest('ion-nav');\r\n        const toPush = this.component;\r\n        if (nav && toPush !== undefined) {\r\n            nav.push(toPush, this.componentProps, { skipIfBusy: true });\r\n        }\r\n    }\r\n    static get is() { return \"ion-nav-push\"; }\r\n    static get properties() { return {\r\n        \"component\": {\r\n            \"type\": String,\r\n            \"attr\": \"component\"\r\n        },\r\n        \"componentProps\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"component-props\"\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        }\r\n    }; }\r\n    static get listeners() { return [{\r\n            \"name\": \"child:click\",\r\n            \"method\": \"push\"\r\n        }]; }\r\n}\n\nclass NavSetRoot {\r\n    push() {\r\n        const nav = this.el.closest('ion-nav');\r\n        const toPush = this.component;\r\n        if (nav && toPush !== undefined) {\r\n            nav.setRoot(toPush, this.componentProps, { skipIfBusy: true });\r\n        }\r\n    }\r\n    static get is() { return \"ion-nav-set-root\"; }\r\n    static get properties() { return {\r\n        \"component\": {\r\n            \"type\": String,\r\n            \"attr\": \"component\"\r\n        },\r\n        \"componentProps\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"component-props\"\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        }\r\n    }; }\r\n    static get listeners() { return [{\r\n            \"name\": \"child:click\",\r\n            \"method\": \"push\"\r\n        }]; }\r\n}\n\nexport { Nav as IonNav, NavPop as IonNavPop, NavPush as IonNavPush, NavSetRoot as IonNavSetRoot };\n"],"sourceRoot":""}