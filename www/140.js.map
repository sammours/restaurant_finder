{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm/es2017/build/vtbkki9o.sc.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqC;;AAE0B;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8BAA8B;AACnD,6BAA6B;AAC7B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS,EAAE;AACX,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,SAAS,EAAE;AACX,wBAAwB,6BAA6B,aAAa,WAAW,yBAAyB,cAAc,EAAE;AACtH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4DAAmB;AACtC;AACA;AACA;AACA,gBAAgB,wDAAC,SAAS,4BAA4B;AACtD,oCAAoC,wDAAC,SAAS,oCAAoC;AAClF,gBAAgB,wDAAC,iBAAiB,4BAA4B;AAC9D,iCAAiC,wDAAC,SAAS,8DAA8D;AACzG;AACA,qBAAqB,sCAAsC;AAC3D,6BAA6B;AAC7B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,MAAM;AACN,wBAAwB,qCAAqC,oBAAoB,aAAa,0BAA0B,sBAAsB,qBAAqB,uBAAuB,gBAAgB,kBAAkB,yBAAyB,sBAAsB,qBAAqB,iBAAiB,kBAAkB,cAAc,eAAe,aAAa,mBAAmB,aAAa,WAAW,uBAAuB,iBAAiB,kBAAkB,eAAe,gBAAgB,6FAA6F,uBAAuB,kBAAkB,mBAAmB,0BAA0B,yBAAyB,wBAAwB,wBAAwB,uEAAuE,cAAc,mDAAmD,qCAAqC,+OAA+O,sCAAsC,uOAAuO,oCAAoC,EAAE;AAC57C,4BAA4B,aAAa;AACzC;;AAEkG","file":"140.js","sourcesContent":["import { h } from '../ionic.core.js';\n\nimport { e as createThemedClasses } from './chunk-7c632336.js';\n\nclass InfiniteScroll {\r\n    constructor() {\r\n        this.thrPx = 0;\r\n        this.thrPc = 0;\r\n        this.didFire = false;\r\n        this.isBusy = false;\r\n        this.isLoading = false;\r\n        this.threshold = '15%';\r\n        this.disabled = false;\r\n        this.position = 'bottom';\r\n    }\r\n    thresholdChanged(val) {\r\n        if (val.lastIndexOf('%') > -1) {\r\n            this.thrPx = 0;\r\n            this.thrPc = (parseFloat(val) / 100);\r\n        }\r\n        else {\r\n            this.thrPx = parseFloat(val);\r\n            this.thrPc = 0;\r\n        }\r\n    }\r\n    disabledChanged(val) {\r\n        if (this.disabled) {\r\n            this.isLoading = false;\r\n            this.isBusy = false;\r\n        }\r\n        this.enableScrollEvents(!val);\r\n    }\r\n    async componentDidLoad() {\r\n        const contentEl = this.el.closest('ion-content');\r\n        if (contentEl) {\r\n            await contentEl.componentOnReady();\r\n            this.scrollEl = await contentEl.getScrollElement();\r\n        }\r\n        this.thresholdChanged(this.threshold);\r\n        this.enableScrollEvents(!this.disabled);\r\n        if (this.position === 'top') {\r\n            this.queue.write(() => {\r\n                if (this.scrollEl) {\r\n                    this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    componentDidUnload() {\r\n        this.scrollEl = undefined;\r\n    }\r\n    onScroll() {\r\n        const scrollEl = this.scrollEl;\r\n        if (!scrollEl || !this.canStart()) {\r\n            return 1;\r\n        }\r\n        const infiniteHeight = this.el.offsetHeight;\r\n        if (infiniteHeight === 0) {\r\n            return 2;\r\n        }\r\n        const scrollTop = scrollEl.scrollTop;\r\n        const scrollHeight = scrollEl.scrollHeight;\r\n        const height = scrollEl.offsetHeight;\r\n        const threshold = this.thrPc !== 0 ? (height * this.thrPc) : this.thrPx;\r\n        const distanceFromInfinite = (this.position === 'bottom')\r\n            ? scrollHeight - infiniteHeight - scrollTop - threshold - height\r\n            : scrollTop - infiniteHeight - threshold;\r\n        if (distanceFromInfinite < 0) {\r\n            if (!this.didFire) {\r\n                this.isLoading = true;\r\n                this.didFire = true;\r\n                this.ionInfinite.emit();\r\n                return 3;\r\n            }\r\n        }\r\n        else {\r\n            this.didFire = false;\r\n        }\r\n        return 4;\r\n    }\r\n    complete() {\r\n        const scrollEl = this.scrollEl;\r\n        if (!this.isLoading || !scrollEl) {\r\n            return;\r\n        }\r\n        this.isLoading = false;\r\n        if (this.position === 'top') {\r\n            this.isBusy = true;\r\n            const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\r\n            requestAnimationFrame(() => {\r\n                this.queue.read(() => {\r\n                    const scrollHeight = scrollEl.scrollHeight;\r\n                    const newScrollTop = scrollHeight - prev;\r\n                    requestAnimationFrame(() => {\r\n                        this.queue.write(() => {\r\n                            scrollEl.scrollTop = newScrollTop;\r\n                            this.isBusy = false;\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    }\r\n    canStart() {\r\n        return (!this.disabled &&\r\n            !this.isBusy &&\r\n            !!this.scrollEl &&\r\n            !this.isLoading);\r\n    }\r\n    enableScrollEvents(shouldListen) {\r\n        if (this.scrollEl) {\r\n            this.enableListener(this, 'scroll', shouldListen, this.scrollEl);\r\n        }\r\n    }\r\n    hostData() {\r\n        return {\r\n            class: {\r\n                'infinite-scroll-loading': this.isLoading,\r\n                'infinite-scroll-enabled': !this.disabled\r\n            }\r\n        };\r\n    }\r\n    static get is() { return \"ion-infinite-scroll\"; }\r\n    static get properties() { return {\r\n        \"complete\": {\r\n            \"method\": true\r\n        },\r\n        \"disabled\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"disabled\",\r\n            \"watchCallbacks\": [\"disabledChanged\"]\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"enableListener\": {\r\n            \"context\": \"enableListener\"\r\n        },\r\n        \"isLoading\": {\r\n            \"state\": true\r\n        },\r\n        \"position\": {\r\n            \"type\": String,\r\n            \"attr\": \"position\"\r\n        },\r\n        \"queue\": {\r\n            \"context\": \"queue\"\r\n        },\r\n        \"threshold\": {\r\n            \"type\": String,\r\n            \"attr\": \"threshold\",\r\n            \"watchCallbacks\": [\"thresholdChanged\"]\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"ionInfinite\",\r\n            \"method\": \"ionInfinite\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get listeners() { return [{\r\n            \"name\": \"scroll\",\r\n            \"method\": \"onScroll\",\r\n            \"disabled\": true,\r\n            \"passive\": true\r\n        }]; }\r\n    static get style() { return \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\"; }\r\n}\n\nclass InfiniteScrollContent {\r\n    componentDidLoad() {\r\n        if (this.loadingSpinner === undefined) {\r\n            this.loadingSpinner = this.config.get('infiniteLoadingSpinner', this.config.get('spinner', this.mode === 'ios' ? 'lines' : 'crescent'));\r\n        }\r\n    }\r\n    hostData() {\r\n        return {\r\n            class: createThemedClasses(this.mode, 'infinite-scroll-content')\r\n        };\r\n    }\r\n    render() {\r\n        return (h(\"div\", { class: \"infinite-loading\" },\r\n            this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" },\r\n                h(\"ion-spinner\", { name: this.loadingSpinner }))),\r\n            this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: this.loadingText }))));\r\n    }\r\n    static get is() { return \"ion-infinite-scroll-content\"; }\r\n    static get properties() { return {\r\n        \"config\": {\r\n            \"context\": \"config\"\r\n        },\r\n        \"loadingSpinner\": {\r\n            \"type\": String,\r\n            \"attr\": \"loading-spinner\",\r\n            \"mutable\": true\r\n        },\r\n        \"loadingText\": {\r\n            \"type\": String,\r\n            \"attr\": \"loading-text\"\r\n        }\r\n    }; }\r\n    static get style() { return \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600,#666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line{stroke:var(--ion-color-step-600,#666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600,#666)}\"; }\r\n    static get styleMode() { return \"md\"; }\r\n}\n\nexport { InfiniteScroll as IonInfiniteScroll, InfiniteScrollContent as IonInfiniteScrollContent };\n"],"sourceRoot":""}